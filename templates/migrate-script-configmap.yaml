{{ if .Values.dbMigration }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "genomicsdb.fullname" . }}-migrate"
  labels:
    {{- include "genomicsdb.labels" . | nindent 4 }}
data:
  migrate.sh: |
    #!/bin/bash
    
    # bash strict mode
    set -euo pipefail
    IFS=$'\n\t'
    
    # OLDHOST and MIGRATE_DATABASE need to have been set as environment variables
    export PGPASSWORD=$POSTGRESQL_PASSWORD
    export PGUSER=${PGUSER:=postgres}
    export MAX_RETRIES=${MAX_RETIRES:=10}
    
    # may have to try a few times while server pod is being brought up
    i=1
    while true; do
      # copy "globals" (users/roles)
      # exclude the 'postgres' user since that one was defined with initdb
      pg_dumpall -h $OLDHOST -U postgres -g | grep -v 'ROLE postgres' | psql -d postgres && break || echo "failed, try $i"
      if [ $i -ge $MAX_RETRIES ]; then
        echo "Maximum retries, exiting"
        exit -1
      fi
      sleep 20
      ((i++))
    done
    echo "hey, it worked this time!"
    
    # increase max_wal_size (temporarily) since we're about to do a lot of inserts
    psql -d postgres <<EOSQL
    ALTER SYSTEM SET max_wal_size TO '8GB';
    SELECT pg_reload_conf();
    EOSQL
    
    pg_dump -Fc -h $OLDHOST $MIGRATE_DATABASE | pg_restore -C -v -d postgres 2>&1 | tee -a /bitnami/postgresql/migrate.log
    
    # reset the max_wal_size
    psql -d postgres <<EOSQL
    ALTER SYSTEM SET max_wal_size TO DEFAULT;
    SELECT pg_reload_conf();
    EOSQL
{{ end }}
